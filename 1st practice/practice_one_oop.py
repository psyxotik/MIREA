#конспект
"""
Парадигма программирования4
(в широком смысле слова) – совокупность
используемых при разработке программного обеспечения подходов к анализу,
проектированию и программированию, обусловленных типом используемого
языка программирования (императивного или декларативного).

Объектно-ориентированное программирование (object-oriented programming) – парадигма программирования,
основанная на представлении программы в виде совокупности объектов, каждый из которых является экземпляром класса,
а классы образуют иерархию наследования.


Императивное программирование – программирование
вычислительной машины путем описания последовательности инструкций,
выполняемых одна за другой; программист однозначно определяет
последовательность шагов, которые необходимо выполнить для достижения
результата. Соответствующие языки, программы на которых представляют
собой последовательность инструкций, называются императивными языками
программирования.

Декларативное программирование – программирование
вычислительной машины путем описания искомого результата; программист
определяет только требования, которым должен удовлетворять результат, но
не последовательность шагов для его достижения. Соответствующие языки,
программы на которых представляют собой описание требований к
результату, называются декларативными языками программирования.

"""

"""Задание №1. Приведите примеры императивных языков и обоснуйте свой выбор
Ответ: C++, Java, Python, Go; в этих языках программа состоит из последовательных команд, которые изменяют состояние программы
в них важно описать каждый алгоритм для достижения цели

Задание №2. Определите базовый класс Animal, который представляет
животное и который содержит две приватные переменные: строку для
хранения имени животного и целое число для хранения веса животного. Также
определите общедоступную функцию print, которая выводит на консоль
сообщение с указанием имени и веса объекта Animal.
Ответ:"""

class Animal:
    def __init__(self, name, weight):
        self.__name = name       # Приватная переменная для имени животного
        self.__weight = weight   # Приватная переменная для веса животного

    def print(self):
        # Общедоступная функция для вывода информации из приватных переменных
        print(f"Имя животного: {self.__name}, Вес: {self.__weight} кг")

cat = Animal('киса', 12)
print('№2\nОтвет:')
cat.print()

"""Создайте два производных класса Cat (кошка) и Dog (собака),
 которые наследуются от класса Animal. В функции main создайте несколько
 объектов типа Cat и Dog и с помощью функции print выведите информацию об
 этих объектах на консоль
Ответ:"""

# Дочерний класс Cat
class Cat(Animal):
    def __init__(self, name, weight):
        super().__init__(name, weight)  # Вызов конструктора базового класса


    def print(self):
        super().print() # Вызов метода print() базового класса

# Дочерний класс Dog
class Dog(Animal):
    def __init__(self, name, weight):
        super().__init__(name, weight)  # аналогичный вызов конструктора


    def print(self):
        super().print() #аналогичный вызов метода


def main():
    # Создание объектов Cat и Dog
    cat_1 = Cat("Пуговка", 4)
    cat_1.print()
    cat_2 = Cat("Черныш", 5)
    cat_2.print()

    dog_1 = Dog("Шарик", 20)
    dog_1.print()
    dog_2 = Dog("Гав", 25)
    dog_2.print()

#вызов основной функции
if __name__ == "__main__":
    print('№3\nОтвет:')
    main()


"""Задание №4. Представлен код, описывающий класс «Кошелек», и создающий
 его экземпляр, который может хранить монеты различного номинала.
 Необходимо написать код, который добавит 3 монеты по 5 единиц и одну
 монету в 10 единиц в созданный кошелек. В первой строке необходимо указать
 язык программирования, на котором вы предоставляете ответ"""

class Wallet:
     def __init__(self) -> None:
         self.coins = []


     def addCoint(self, coin) -> None:
         self.coins.append(coin)

#Ответ:
wallet = Wallet()

# Добавляем 3 монеты по 5 единиц используя метод addCoint класса Wallet
wallet.addCoint(5)
wallet.addCoint(5)
wallet.addCoint(5)
# Добавляем одну монету в 10 единиц
wallet.addCoint(10)
print('№4 Python\nОтвет:')
print(wallet.coins)