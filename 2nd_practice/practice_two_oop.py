#конспект
"""
Класс. - Это шаблон для формирования объектов
Объект. - Код, описывающий элемент с четко определенными свойствами и задачами
Метод. - Программный код, отвечающий за взаимодействие c внешней средой
Атрибут. - Свойства объекта
Инкапсуляция - Принцип инкапсуляции («сокрытия») основан на «ограждении» пользователя от
ненужных ему методов в рамках класса и предоставлении доступа только к необходимым интерфейсам.
Наследование - Суть его заключается в «копировании» функций базового класса для создания новых
Полиморфизм - способность объектов программирования менять реализацию задачи в зависимости от условий
Абстракция - классы, олицетворяющие то, что не имеет физического представления
"""


"""
Задание 1. Иван – оригинальный человек. Он решил создать класс Иван, принимающий
при инициализации 2 параметра: имя и возраст. Но на этом он не успокоился.
Не важно, какое имя передаст пользователь при создании экземпляра, оно
всегда будет содержать Николая. В частности - если пользователя на самом деле зовут
Николаем, то с именем ничего не произойдет, а если его зовут,
например, Максим, то оно преобразуется в Я не Максим, а Николай.
Более того, никаких других атрибутов и методов у экземпляра не может
быть добавлено, даже если кто-то и вздумает так поступить (т.е. если некий
пользователь решит прибавить к экземпляру свойство отчество или метод
приветствие, то ничего у такого хитреца не получится).
"""


def check_age(age):
    if 4 < age < 21:
        return 'лет'
    elif str(age)[-1] in ['5', '6', '7', '8', '9', '0']:
        return 'лет'
    elif str(age)[-1] in ['1']:
        return 'год'
    return 'года'


print('№1')


class Ivan:
    def __init__(self, name, age):
        if name != "Николай":
            self._name = f"не {name}, а Николай"
        else:
            self._name = name

        self._age = age

    def print(self):
        print(f'Я {self._name}, мой возраст {self._age} {check_age(self._age)}')

    def __setattr__(self, name, value):
        if name in ('_name', '_age'):
            super().__setattr__(name, value)
        else:
            raise AttributeError("Нельзя добавлять новые атрибуты или изменять существующие!")


# Пример использования
print('Инициализация класса Иван с именем Максим и возрастом 30: ')
ivan = Ivan("Максим", 30)
ivan.print()

print('Попытка вызвать(добавить) несуществующий атрибут вызовет ошибку')
try:
    ivan.surname = 'Мельников'
except AttributeError as e:
    print(e)
print()
"""
Задание 2. Саша создала класс KgToPounds с параметром kg,
куда передается определенное количество килограмм, а с
помощью метода to_pounds() они переводятся в фунты. 
Чтобы закрыть доступ к переменной kg она реализовала
методы set_kg() - для задания нового значения килограммов,
get_kg() - для вывода текущего значения кг. Из-за этого возникло
неудобство: нам нужно теперь использовать эти 2 метода для
задания и вывода значений. Помогите ей переделать класс с
использованием функции property() и свойств-декораторов. Код приведен ниже.
"""

print('№2')
class KgToPounds:
    def __init__(self, kg):
        self.__kg = kg

    def to_pounds(self):
        return self.__kg * 2.205

    @property
    def kg(self):
        return self.__kg

    @kg.setter
    def kg(self, new_kg):
        if isinstance(new_kg, (int, float)):
            self.__kg = new_kg
        else:
            raise ValueError('Килограммы задаются только числами')



print('Инициализируем класс <килограммы в фунты>')
converter = KgToPounds(10)
print(f'Количество килограмм в классе - {converter.kg} кг')
print(f'Килограммы в фунтах: {converter.to_pounds()} фунтов')

converter = KgToPounds(20)
print(f'Количество килограмм в классе - {converter.kg} кг')
print(f'Килограммы в фунтах: {converter.to_pounds()} фунтов')

print()
"""
Требуется проверить, возможно ли из представленных отрезков
условной длины сформировать треугольник. Для этого создайте
класс TriangleChecker, принимающий только положительные числа.
С помощью метода is_triangle() возвращаются следующие значения
(в зависимости от ситуации): 
- Ура, можно построить треугольник!
- С отрицательными числами ничего не выйдет! 
- Жаль, но из этого треугольник не сделать.
"""

print('№3')


class TriangleChecker:
    def __init__(self, a, b, c):
        self.sides = (a, b, c)

    def is_triangle(self):
        a, b, c = self.sides

        if any(side <= 0 for side in self.sides):
            return "С отрицательными числами ничего не выйдет!"

        if a + b > c and a + c > b and b + c > a:
            return "Ура, можно построить треугольник!"
        else:
            return "Жаль, но из этого треугольник не сделать."


# Пример использования
print('проверяем треугольник со сторонами: 3, 4, 5')
checker1 = TriangleChecker(3, 4, 5)
print(checker1.is_triangle())
print('проверяем треугольник со сторонами: -1, 4, 5')
checker2 = TriangleChecker(-1, 4, 5)
print(checker2.is_triangle())

print('проверяем треугольник со сторонами: 40, 1, 1')
checker3 = TriangleChecker(40, 1, 1)
print(checker3.is_triangle())
a, b, c = map(int, input('Введите 3 стороны треугольника через пробел:\n').split())
checker4 = TriangleChecker(a, b, c)
print(checker4.is_triangle())
print()
"""
Описание классовой структуры: 
Есть Человек, характеристиками которого являются: 1. Имя 2. Возраст 3. Наличие денег
4. Наличие собственного жилья 
Человек может: 1. Предоставить информацию о себе 2. Заработать деньги 
3. Купить дом 
Также же есть Дом, к свойствам которого относятся: 1. Площадь 2. Стоимость
Для Дома можно: 1. Применить скидку на покупку 
Также есть Небольшой Типовой Дом, обязательной площадью 40м2. 
Задание 
4.1 Класс Human 
1. Создайте класс Human. 
2. Определите для него два статических атрибута: default_name и default_age. 
3. Создайте метод __init__(), который помимо self принимает еще два параметра: name и age. 
Для этих параметров задайте значения по умолчанию, используя атрибута default_name и default_age. 
В методе __init__() определите четыре атрибута: Публичные - name и age. 
Приватные - money и house. 
4. Реализуйте справочный метод info(), который будет выводить поля name, age, house и money.
5. Реализуйте справочный статический метод default_info(), 
который будет выводить статические атрибуты default_name и default_age. 
6. Реализуйте приватный метод make_deal(), который будет отвечать за 
техническую реализацию покупки дома: уменьшать количество денег на счету 
и присваивать ссылку на только что купленный дом. 
В качестве аргументов данный метод принимает объект дома и его цену. 
7. Реализуйте метод earn_money(), увеличивающий значение свойства money. 
8. Реализуйте метод buy_house(), который будет проверять, что у человека 
достаточно денег для покупки, и совершать сделку. Если денег слишком 
мало - нужно вывести предупреждение в консоль. Параметры метода: 
ссылка на дом и размер скидки 
4.2. Класс House 
1. Создайте класс House 
2. Создайте метод __init__() и определите внутри него два 
атрибута: _area и _price. Свои начальные значения они получают из 
параметров метода __init__() 
3. Создайте метод final_price(), который принимает в качестве параметра 
размер скидки и возвращает цену с учетом данной скидки. 
Класс SmallHouse 
1. Создайте класс SmallHouse, унаследовав его функционал от класса House 
2. Внутри класса SmallHouse переопределите метод __init__() так, 
чтобы он создавал объект с площадью 40м2
"""

print('№4.1')


class Human:
    default_name = "Нет имени"
    default_age = 30

    def __init__(self, name=default_name, age=default_age):
        self.name = name
        self.age = age
        self.__money = 0
        self.__house = []

    def info(self):
        house_info = "Есть дом" if self.__house else "Нет дома"
        print(f'Информация о пользователе <{self.name}>:\nВозраст - {self.age} {check_age(self.age)} \nсбережения - {self.__money} \n'
              f'Дом - {house_info}')

    @staticmethod
    def default_info():
        print(f"Имя по умолчанию: {Human.default_name}, Возраст по умолчанию: {Human.default_age} {check_age(Human.default_age)}")

    def __make_deal(self, house, price):
        self.__money -= price
        self.__house.append(house)

    def earn_money(self, profit):
        self.__money += profit
        print(f"Заработано: {profit}. Теперь денег: {self.__money}")

    def buy_house(self, house, discount=0.0):
        if self.age < 18:
            print(f'Нельзя купить дом будучи несовершеннолетним')
        else:
            final_price = house.final_price(discount)

            if final_price <= self.__money:
                self.__make_deal(house, final_price)
                print(f"Дом площадью {house._area} м2 успешно куплен за {final_price}")
            else:
                print(f'не хватает денег для совершения сделки, окончательная цена дома: {final_price} вам не хватает:'
                      f' {final_price - self.__money}')


class House:
    def __init__(self, area, price):
        self._area = area
        self.__price = price

    def final_price(self, discount):
        return self.__price * (1 - discount)


class SmallHouse(House):
    def __init__(self, price):
        super().__init__(40, price)

print('Инициализируем класс <Человек> с именем Макс и возрастом 25')
customer = Human(name='Макс', age=25)
print('Выводим информацию о человеке')
customer.info()
print('Вызываем метод <Заработать деньги> и передаём в качестве аргумента 1000000')
customer.earn_money(1000000)
print('Инициализируем класс <Дом> с площадью 120 и ценой 10000000')
cottage = House(120, 10000000)
print('Вызываем метод <купить дом> и передаём в качестве аргументов котедж и скидку в 10%')
customer.buy_house(cottage, discount=0.1)
print('Вызываем метод <Заработать деньги> и передаём в качестве аргумента 8000000')
customer.earn_money(8000000)
print('Вызываем метод <купить дом> и передаём в качестве аргументов котедж и скидку в 10%')
customer.buy_house(cottage, discount=0.1)
print('№4.2')
print('Инициализируем класс <Маленький дом> с ценой 120000')
wooden_house = SmallHouse(120000)
print('Вызываем метод <Заработать деньги> и передаём в качестве аргумента 1200000')
customer.earn_money(1200000)
print('Вызываем метод <купить дом> и передаём в качестве аргументов деревянный дом')
customer.buy_house(wooden_house)
print('выводим информацию о пользователе')
customer.info()
